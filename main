#include <iostream>
#include <graphics.h>
#include <windows.h>
#include <cstdlib>
#include <ctime>
#include <random>
#include "meniu.h"
using namespace std;
struct piesa{
    int player;
    int dimensiune;///1-mic  2-mediu   3-mare
    bool peTabla;
    piesa *sub;
};

struct cell{
    int ctPiese;
    piesa *stiva;
};
int winner;
cell T[3][3];  ///TABLA DE JOC
piesa P[2][6]; ///Cei 2 PLAYERI
int nrPiesa,linie,coloana;
bool testOpt;


void deschideGrafica() {
   int gd = DETECT, gm;
    initgraph(&gd, &gm, "c:\\tc\\bgi");
    //initwindow(1000, 800);
}

const int x = 150, y = 100, latura = 100;

void deseneazaCerc(int cx, int cy, int r, int culoare) {
    setcolor(culoare);
    setfillstyle(SOLID_FILL, culoare);
    fillellipse(cx, cy, r, r);
}
void deseneazaTabla() {
       for (int i = 1; i < 3; i++) {

        setcolor(GREEN);
        line(x, y + i * latura, x + 3 * latura, y + i * latura);

    }
    for (int i = 1; i< 3; i++) {
        setcolor(FOREGROUND_RED );
        line(x + i * latura, y, x + i * latura, y + 3 * latura);
    }

int idx = 0;
for(int i = 1; i <= 3; i++)
{
     deseneazaCerc(30, 50 + 65 * i, 10 * i, RED);
      P[0][idx].player = 1;
        P[0][idx].dimensiune = i*10;
        P[0][idx].peTabla = false;
        P[0][idx].sub = nullptr;
        idx++;
     deseneazaCerc(100, 50 + 65 * i, 10 * i, RED);
      P[0][idx].player = 1;
        P[0][idx].dimensiune = i;
        P[0][idx].peTabla = false;
        P[0][idx].sub = nullptr;
        idx++;
}
idx = 0;
for(int i = 1; i <= 3; i++)
{
     deseneazaCerc(getmaxx() - 30, 50 + 65 * i, 10 * i, GREEN);
     P[1][idx].player = 2;
        P[1][idx].dimensiune = i*10;
        P[1][idx].peTabla = false;
        P[1][idx].sub = nullptr;
        idx++;

     deseneazaCerc(getmaxx() - 100, 50 + 65 * i, 10 * i, GREEN);
      P[1][idx].player = 2;
        P[1][idx].dimensiune = i;
        P[1][idx].peTabla = false;
        P[1][idx].sub = nullptr;
        idx++;
}
}

bool esteClickInCerc(int clickX, int clickY, int centruX, int centruY, int raza) {
    int dx = clickX - centruX;
    int dy = clickY - centruY;
    return (dx * dx + dy * dy) <= (raza * raza);
}
///const int x = 150, y = 100, latura = 100;
const int DIMENSIUNE_TABLA = 3;

int tabla[DIMENSIUNE_TABLA][DIMENSIUNE_TABLA] = {0};
int centruX, centruY, raza;
bool poatePunePiesa(int linie, int coloana, int dimensiune) {
    if (T[linie][coloana].ctPiese > 0) {
        if (T[linie][coloana].stiva->dimensiune >= dimensiune) {
            return false;
        }
    }
    return true;
}

void actualizeazaTabla(int linie, int coloana, int dimensiune) {
    tabla[linie][coloana] = dimensiune;
}
bool WinCases(cell T[3][3]){
    int i;
    ///LINIE
    for(i=0;i<3;i++){
        if(T[i][0].ctPiese && T[i][1].ctPiese && T[i][2].ctPiese && T[i][0].stiva->player == T[i][1].stiva->player && T[i][0].stiva->player == T[i][2].stiva->player)
            {winner=T[i][0].stiva->player;return 1;}
    }

    ///COLOANA
    for(i=0;i<3;i++){
        if(T[0][i].ctPiese && T[1][i].ctPiese && T[2][i].ctPiese && T[0][i].stiva->player == T[1][i].stiva->player && T[0][i].stiva->player == T[2][i].stiva->player)
            {winner=T[0][i].stiva->player;return 1;}
    }

    ///DIAGONALE
    if(T[0][0].ctPiese && T[1][1].ctPiese && T[2][2].ctPiese &&T[0][0].stiva->player==T[1][1].stiva->player && T[0][0].stiva->player==T[2][2].stiva->player)
        {winner=T[0][0].stiva->player;return 1;}
    if(T[0][2].ctPiese && T[1][1].ctPiese && T[2][0].ctPiese && T[0][2].stiva->player==T[1][1].stiva->player && T[1][1].stiva->player==T[2][0].stiva->player)
        {winner=T[1][1].stiva->player;return 1;}

    return 0;
}
piesa* scoatePiesaDinStiva(int linie, int coloana) {
    if (T[linie][coloana].ctPiese > 0) {
        piesa* piesaScoasa = T[linie][coloana].stiva;
        T[linie][coloana].stiva = piesaScoasa->sub;
        T[linie][coloana].ctPiese--;

        if (T[linie][coloana].ctPiese == 0) {
            T[linie][coloana].stiva = nullptr;
        }

        return piesaScoasa;
    }
    return nullptr;
}

int castig(int a)
{
    return a;
}
int gestioneazaIntrariMeniu() {
    int x, y;
    while (true) {
        if (ismouseclick(WM_LBUTTONDOWN)) {
            getmouseclick(WM_LBUTTONDOWN, x, y);
            Beep(500, 60);

            if (x >= 200 && x <= 440 && y >= 200 && y <= 260) {
                return 1;
            }
            else if (x >= 200 && x <= 440 && y >= 280 && y <= 340) {
                return 2;
            }
            else if (x >= 200 && x <= 440 && y >= 360 && y <= 420) {
                return 3;
            }
        }
    }
}
void reset(){
 for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            T[i][j].ctPiese = 0;
            T[i][j].stiva = nullptr;
        }
    }
}
void gestioneazaMutari()
{ bool selectat = false;
    int culoareSelectata = 0;
    int dimensiuneSelectata = 0;
    int ok=1;
    while (true) {
            int idx;
        if (ismouseclick(WM_LBUTTONDOWN)) {
            clearmouseclick(WM_LBUTTONDOWN);
            Beep(500, 60);
            int mouseX = mousex();
            int mouseY = mousey();

            if (!selectat) {
                // Selectarea unui pion
                for (int i = 1; i <= 3; i++) {
                    // Pioni roÈ™ii
                    if (mouseX < 150 && ok==1) {
                        centruX = (mouseX < 65) ? 30 : 100;
                        if(centruX==30)
                            idx=0;
                        else idx=1;
                        centruY = 50 + 65 * i;
                        raza = 10 * i;

                        if (esteClickInCerc(mouseX, mouseY, centruX, centruY, raza)) {
                            selectat = true;
                            culoareSelectata = RED;
                            dimensiuneSelectata = 10 * i;
                            setcolor(BLACK);
                            setfillstyle(SOLID_FILL, BLACK);
                            fillellipse(centruX, centruY, raza, raza);
                            ok=2;
                            break;
                        }
                        idx=idx+2;
                    }
                    // Pioni verzi
                    if (mouseX > getmaxx() - 150 && ok==2) {
                        centruX = (mouseX > getmaxx() - 65) ? getmaxx() - 30 : getmaxx() - 100;
                        centruY = 50 + 65 * i;
                        if(centruX==getmaxx()-30)
                            idx=0;
                        else idx=1;
                        raza = 10 * i;

                        if (esteClickInCerc(mouseX, mouseY, centruX, centruY, raza)) {
                            selectat = true;
                            culoareSelectata = GREEN;
                            dimensiuneSelectata = 10 * i;
                            setcolor(BLACK);
                            setfillstyle(SOLID_FILL, BLACK);
                            fillellipse(centruX, centruY, raza, raza);
                            ok=1;
                            break;
                        }
                        idx=idx+2;
                    }

                    //Pt alea de pe tabla pe care vreau sa le mut
                    if(mouseX > 150 && mouseX < getmaxx() - 150)
                    {if(ok==1){

                         int linie = (mouseY - y) / latura;
                         int coloana = (mouseX - x) / latura;

                         if (T[linie][coloana].ctPiese != 0 && T[linie][coloana].stiva->player == 1) {
                            piesa* piesaSelectata = scoatePiesaDinStiva(linie, coloana);
                            if (piesaSelectata != nullptr) {
                                selectat = true;
                                culoareSelectata = RED;
                                dimensiuneSelectata = piesaSelectata->dimensiune;

                                deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2,30, BLACK);
                                 if (T[linie][coloana].ctPiese > 0){
                                        if(T[linie][coloana].stiva->player==1)
                               deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, T[linie][coloana].stiva->dimensiune,RED);
                               else if(T[linie][coloana].stiva->player==2)
                               deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, T[linie][coloana].stiva->dimensiune,GREEN);
                                 }

                                ok=2;
                                break;
    }
}

                         }
                         else if(ok==2){
                         int linie = (mouseY - y) / latura;
                         int coloana = (mouseX - x) / latura;
                         if(T[linie][coloana].ctPiese != 0 )
                         if (T[linie][coloana].ctPiese != 0 && T[linie][coloana].stiva->player == 2) {
                            piesa* piesaSelectata = scoatePiesaDinStiva(linie, coloana);
                            if (piesaSelectata != nullptr) {
                                selectat = true;
                                culoareSelectata = GREEN;
                                dimensiuneSelectata = piesaSelectata->dimensiune;

                                deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, 30, BLACK);
                                 if (T[linie][coloana].ctPiese > 0){
                                        if(T[linie][coloana].stiva->player==1)
                               deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, T[linie][coloana].stiva->dimensiune,RED);
                               else if(T[linie][coloana].stiva->player==2)
                               deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, T[linie][coloana].stiva->dimensiune,GREEN);
                                 }


                                ok=1;
                                break;
    }
}

                         }

                }



            }
}            else {

                int linie = (mouseY - y) / latura;
                int coloana = (mouseX - x) / latura;

                if (linie >= 0 && linie < DIMENSIUNE_TABLA && coloana >= 0 && coloana < DIMENSIUNE_TABLA) {
                    if (poatePunePiesa(linie, coloana, dimensiuneSelectata)) {
                        centruX = x + coloana * latura + latura / 2;
                        centruY = y + linie * latura + latura / 2;


                        deseneazaCerc(centruX, centruY, dimensiuneSelectata, culoareSelectata);
                       /** piesa *p=T[latura][coloana].stiva;

                        p->sub=T[latura][coloana].stiva;
                        T[latura][coloana].stiva=p;                       ///CE SE INTAMPLA
                          T[latura][coloana].ctPiese++;
                        p->peTabla=1;**/
                        piesa *p = new piesa;
                        p->player = (culoareSelectata == RED) ? 1 : 2;
                        p->dimensiune = dimensiuneSelectata ;
                        p->peTabla = true;
                        p->sub = T[linie][coloana].stiva;
                        T[linie][coloana].stiva = p; // AdaugÄƒ piesa la stivÄƒ
                        T[linie][coloana].ctPiese++;
                        p->peTabla=1;

                      if( WinCases(T))
                      {

    cleardevice();
    setbkcolor(BLACK);

    readimagefile("winner.jpg", 0, 0, 200, 200);

   settextstyle(0, HORIZ_DIR, 5);
    if (winner == 1)
    {

        outtextxy(150, 100, "RED WINS");
    }
    else if (winner == 2)
        outtextxy(150, 100, "GREEN WINS");

    readimagefile("ANOTHEROUND.jpg", 200, 200, 440, 260);
    readimagefile("LEAVE.jpg", 200, 280, 440, 340);


    int optiune = 0;
    while (optiune == 0) {
        if (ismouseclick(WM_LBUTTONDOWN)) {
            clearmouseclick(WM_LBUTTONDOWN);
            Beep(500, 60);
            int mx = mousex();
            int my = mousey();

            if (mx >= 200 && mx <= 440 && my >= 200 && my <= 260) {
                optiune = 1;
            }

            else if (mx >= 200 && mx <= 440 && my >= 280 && my <= 340) {
                optiune = 2;
            }
        }
    }

    if (optiune == 1) {

        cleardevice();
        reset();
        deseneazaTabla();
        readimagefile("logo.jpg", 120, 0, 500, 70);
        gestioneazaMutari();
    } else if (optiune == 2) {
        closegraph();
        exit(0);
    }
   // closegraph();
                      }


                        selectat = false;
                    }
                }
            }
        }
    }
}
/*int generateRandomCoordinate(int mini, int maxi) {
    srand(time(0));
    int randomNum1 = minVal + (rand() % (maxVal - minVal + 1));
    int randomNum2 = minVal + (rand() % (maxVal - minVal + 1));
}*/
/*
void mutarecalcrand() {
    bool selectat = false;
    int culoareSelectata = 0;
    int dimensiuneSelectata = 0;
    int ok=1, tura = 2, mouseX, mouseY;
    int idx;

    while (true) {
        if (tura == 1) { // Mutarea jucÄƒtorului
            if (!selectat) {
                if (ismouseclick(WM_LBUTTONDOWN)) {
                    clearmouseclick(WM_LBUTTONDOWN);
                    mouseX = mousex();
                    mouseY = mousey();

                    for (int i = 1; i <= 3; i++) {
                        if (mouseX < 150) {
                        centruX = (mouseX < 65) ? 30 : 100;
                        if(centruX==30)
                            idx=0;
                        else idx=1;
                        centruY = 50 + 65 * i;
                        raza = 10 * i;

                        if (esteClickInCerc(mouseX, mouseY, centruX, centruY, raza)) {
                            selectat = true;
                            culoareSelectata = RED;
                            dimensiuneSelectata = 10 * i;
                            setcolor(BLACK);
                            setfillstyle(SOLID_FILL, BLACK);
                            fillellipse(centruX, centruY, raza, raza);
                            ok=2;
                            break;
                        }
                        idx=idx+2;
                    }
                    if (mouseX > 150 && mouseX < getmaxx() - 150) {
                        int linie = (mouseY - y) / latura;
                        int coloana = (mouseX - x) / latura;

                        if (T[linie][coloana].ctPiese != 0 && T[linie][coloana].stiva->player == 1) {
                            piesa* piesaSelectata = scoatePiesaDinStiva(linie, coloana);
                            if (piesaSelectata != nullptr) {
                                selectat = true;
                                culoareSelectata = RED;
                                dimensiuneSelectata = piesaSelectata->dimensiune;

                                deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, 30, BLACK);

                                if (T[linie][coloana].ctPiese > 0) {
                                    deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, T[linie][coloana].stiva->dimensiune, RED);
                                }

                                ok = 2;
                                break;
                            }
                        }
                    }
                }
                }
            }
             else {
                if (ismouseclick(WM_LBUTTONDOWN)) {
                    clearmouseclick(WM_LBUTTONDOWN);
                    mouseX = mousex();
                    mouseY = mousey();

                    int linie = (mouseY - y) / latura;
                    int coloana = (mouseX - x) / latura;

                    if (linie >= 0 && linie < DIMENSIUNE_TABLA && coloana >= 0 && coloana < DIMENSIUNE_TABLA) {
                        if (poatePunePiesa(linie, coloana, dimensiuneSelectata)) {
                            deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, dimensiuneSelectata, culoareSelectata);

                            piesa* p = new piesa;
                            p->player = 1;
                            p->dimensiune = dimensiuneSelectata;
                            p->peTabla = true;
                            p->sub = T[linie][coloana].stiva;
                            T[linie][coloana].stiva = p;
                            T[linie][coloana].ctPiese++;

                            selectat = false;
                            tura = 2; // SchimbÄƒ la calculator
                        }
                    }
                }
            }
        } else if (tura == 2) { // Mutarea calculatorului
            bool mutat = false;
            while (!mutat) {
                srand(time(0));
                mouseX = 0 + (rand() % (getmaxx() - 0 + 1));
                mouseY = 0 + (rand() % (getmaxy() - 0 + 1));
                 for (int i = 1; i <= 3; i++) {
                if (mouseX > getmaxx() - 150) {
                    centruX = (mouseX > getmaxx() - 65) ? getmaxx() - 30 : getmaxx() - 100;
                        centruY = 50 + 65 * i;
                    idx = (centruX == getmaxx() - 30) ? 0 : 1;
                    raza = 10 * i;

                    if (esteClickInCerc(mouseX, mouseY, centruX, centruY, raza)) {
                        mutat = true;
                        culoareSelectata = GREEN;
                        dimensiuneSelectata = 10 * i;
                        setcolor(BLACK);
                        setfillstyle(SOLID_FILL, BLACK);
                        fillellipse(centruX, centruY, raza, raza);
                        ok = 1;
                        break;
                    }
                    idx += 2;
                }
                if(mouseX > 150 && mouseX < getmaxx() - 150){
                         int linie = (mouseY - y) / latura;
                         int coloana = (mouseX - x) / latura;
                         if(T[linie][coloana].ctPiese != 0 )
                         if (T[linie][coloana].ctPiese != 0 && T[linie][coloana].stiva->player == 2) {
                            piesa* piesaSelectata = scoatePiesaDinStiva(linie, coloana);
                            if (piesaSelectata != nullptr) {
                                selectat = true;
                                culoareSelectata = GREEN;
                                dimensiuneSelectata = piesaSelectata->dimensiune;

                                deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, 30, BLACK);
                                 if (T[linie][coloana].ctPiese > 0){
                                        if(T[linie][coloana].stiva->player==1)
                               deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, T[linie][coloana].stiva->dimensiune,RED);
                               else if(T[linie][coloana].stiva->player==2)
                               deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, T[linie][coloana].stiva->dimensiune,GREEN);
                                 }


                                ok=1;
                                break;
    }
}

                         }
                 }
            }
                if (mutat) {
                    int linie = rand() % DIMENSIUNE_TABLA;
                    int coloana = rand() % DIMENSIUNE_TABLA;

                    if (linie >= 0 && linie < DIMENSIUNE_TABLA && coloana >= 0 && coloana < DIMENSIUNE_TABLA) {
                        if (poatePunePiesa(linie, coloana, dimensiuneSelectata)) {
                            deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, dimensiuneSelectata, culoareSelectata);

                            piesa* p = new piesa;
                            p->player = 2;
                            p->dimensiune = dimensiuneSelectata;
                            p->peTabla = true;
                            p->sub = T[linie][coloana].stiva;
                            T[linie][coloana].stiva = p;
                            T[linie][coloana].ctPiese++;

                            mutat = true;
                            tura = 1; // SchimbÄƒ la jucÄƒtor
                        }
                    }
                }
            }


        // VerificÄƒ dacÄƒ cineva a cÃ¢È™tigat
        if (WinCases(T)) {
            cleardevice();
            setbkcolor(BLACK);
            readimagefile("winner.jpg", 0, 0, 200, 200);
            settextstyle(0, HORIZ_DIR, 5);
            if (winner == 1) {
                outtextxy(150, 100, "RED WINS");
            } else if (winner == 2) {
                outtextxy(150, 100, "GREEN WINS");
            }
            break;
        }
    }
}

*/
void mutarecalcrand() {
    bool selectat = false;
    int culoareSelectata = 0;
    int dimensiuneSelectata = 0;
    int ok = 1, tura = 2, mouseX, mouseY;
    int idx;
    int centruX, centruY, raza;

    // AsigurÄƒ-te cÄƒ variabilele globale precum T, x, y, latura, DIMENSIUNE_TABLA, winner sunt definite
    while (true) {
        if (tura == 1) { // Mutarea jucÄƒtorului
            if (!selectat) {
                if (ismouseclick(WM_LBUTTONDOWN)) {
                    clearmouseclick(WM_LBUTTONDOWN);
                    mouseX = mousex();
                    mouseY = mousey();

                    for (int i = 1; i <= 3; i++) {
                        if (mouseX < 150) {
                            centruX = (mouseX < 65) ? 30 : 100;
                            if (centruX == 30)
                                idx = 0;
                            else
                                idx = 1;
                            centruY = 50 + 65 * i;
                            raza = 10 * i;

                            if (esteClickInCerc(mouseX, mouseY, centruX, centruY, raza)) {
                                selectat = true;
                                culoareSelectata = RED;
                                dimensiuneSelectata = 10 * i;
                                setcolor(BLACK);
                                setfillstyle(SOLID_FILL, BLACK);
                                fillellipse(centruX, centruY, raza, raza);
                                ok = 2;
                                break;
                            }
                            idx += 2;
                        }
                    }

                    if (mouseX > 150 && mouseX < getmaxx() - 150) {
                        int linie = (mouseY - y) / latura;
                        int coloana = (mouseX - x) / latura;

                        if (T[linie][coloana].ctPiese != 0 && T[linie][coloana].stiva->player == 1) {
                            piesa* piesaSelectata = scoatePiesaDinStiva(linie, coloana);
                            if (piesaSelectata != nullptr) {
                                selectat = true;
                                culoareSelectata = RED;
                                dimensiuneSelectata = piesaSelectata->dimensiune;

                                deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, 30, BLACK);

                                if (T[linie][coloana].ctPiese > 0) {
                                    deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, T[linie][coloana].stiva->dimensiune, RED);
                                }

                                ok = 2;
                                break;
                            }
                        }
                    }
                }
            } else {
                if (ismouseclick(WM_LBUTTONDOWN)) {
                    clearmouseclick(WM_LBUTTONDOWN);
                    mouseX = mousex();
                    mouseY = mousey();

                    int linie = (mouseY - y) / latura;
                    int coloana = (mouseX - x) / latura;

                    if (linie >= 0 && linie < DIMENSIUNE_TABLA && coloana >= 0 && coloana < DIMENSIUNE_TABLA) {
                        if (poatePunePiesa(linie, coloana, dimensiuneSelectata)) {
                            deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, dimensiuneSelectata, culoareSelectata);

                            piesa* p = new piesa;
                            p->player = 1;
                            p->dimensiune = dimensiuneSelectata;
                            p->peTabla = true;
                            p->sub = T[linie][coloana].stiva;
                            T[linie][coloana].stiva = p;
                            T[linie][coloana].ctPiese++;

                            selectat = false;
                            tura = 2; // SchimbÄƒ la calculator
                        }
                    }
                }
            }
        } else if (tura == 2) { // Mutarea calculatorului
            bool mutat = false;
            srand(time(0));
            while (!mutat) {
                mouseX = 0 + (rand() % (getmaxx()));
                mouseY = 0 + (rand() % (getmaxy()));
                for (int i = 1; i <= 3; i++) {
                    if (mouseX > getmaxx() - 150) {
                        centruX = (mouseX > getmaxx() - 65) ? getmaxx() - 30 : getmaxx() - 100;
                        centruY = 50 + 65 * i;
                        idx = (centruX == getmaxx() - 30) ? 0 : 1;
                        raza = 10 * i;

                        if (esteClickInCerc(mouseX, mouseY, centruX, centruY, raza)) {
                            mutat = true;
                            culoareSelectata = GREEN;
                            dimensiuneSelectata = 10 * i;
                            setcolor(BLACK);
                            setfillstyle(SOLID_FILL, BLACK);
                            fillellipse(centruX, centruY, raza, raza);
                            ok = 1;
                            break;
                        }
                        idx += 2;
                    }
                    if (mouseX > 150 && mouseX < getmaxx() - 150) {
                        int linie = (mouseY - y) / latura;
                        int coloana = (mouseX - x) / latura;
                        if (T[linie][coloana].ctPiese != 0 && T[linie][coloana].stiva->player == 2) {
                            piesa* piesaSelectata = scoatePiesaDinStiva(linie, coloana);
                            if (piesaSelectata != nullptr) {
                                selectat = true;
                                culoareSelectata = GREEN;
                                dimensiuneSelectata = piesaSelectata->dimensiune;

                                deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, 30, BLACK);
                                if (T[linie][coloana].ctPiese > 0) {
                                    if (T[linie][coloana].stiva->player == 1)
                                        deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, T[linie][coloana].stiva->dimensiune, RED);
                                    else if (T[linie][coloana].stiva->player == 2)
                                        deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, T[linie][coloana].stiva->dimensiune, GREEN);
                                }

                                ok = 1;
                                break;
                            }
                        }
                    }
                }
                if (mutat) {
                      //   srand(time(0));
                    int linie = rand() % DIMENSIUNE_TABLA;
                    int coloana = rand() % DIMENSIUNE_TABLA;

                    if (linie >= 0 && linie < DIMENSIUNE_TABLA && coloana >= 0 && coloana < DIMENSIUNE_TABLA) {
                        if (poatePunePiesa(linie, coloana, dimensiuneSelectata)) {
                            deseneazaCerc(x + coloana * latura + latura / 2, y + linie * latura + latura / 2, dimensiuneSelectata, culoareSelectata);

                            piesa* p = new piesa;
                            p->player = 2;
                            p->dimensiune = dimensiuneSelectata;
                            p->peTabla = true;
                            p->sub = T[linie][coloana].stiva;
                            T[linie][coloana].stiva = p;
                            T[linie][coloana].ctPiese++;

                            mutat = true;
                            tura = 1; // SchimbÄƒ la jucÄƒtor
                        }
                    }
                }
            }

            // VerificÄƒ dacÄƒ cineva a cÃ¢È™tigat
            if (WinCases(T)) {
                cleardevice();
                setbkcolor(BLACK);
                readimagefile("winner.jpg", 0, 0, 200, 200);
                settextstyle(0, HORIZ_DIR, 5);
                if (winner == 1) {
                    outtextxy(150, 100, "RED WINS");
                } else if (winner == 2) {
                    outtextxy(150, 100, "GREEN WINS");
                }
                break;
            }
        }
    }
}


int main()
{

    deschideGrafica();

    while (true) {
        deseneazaMeniuPrincipal();
        int optiune = gestioneazaIntrariMeniu();

        if (optiune == 1) {
            while (true) {
                cumjoci();
                int mod = gestioneazacumjoci();
                if(mod==2)
                {
            cleardevice();
            deseneazaTabla();
             readimagefile("logo.jpg", 120, 0, 500, 70);
            gestioneazaMutari();
                }

            else{
            cleardevice();
            deseneazaTabla();
             readimagefile("logo.jpg", 120, 0, 500, 100);
           mutarecalcrand();
                        }
        }
        }
        else if (optiune == 2)
            {
                cleardevice();
                afiseazaInstrucÈ›iuni();
            }

        else if (optiune == 3) {

            closegraph();
            exit(0);
        }
    }

    return 0;
}
